@page "/admin/employee-manager/edit/{EmployeeManagerId:guid}"
@rendermode InteractiveServer
@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject EditSuccess EditSuccessState

<PageTitle>Employee Manager Edit</PageTitle>

@if (EmployeeManager is null && !Busy)
{
  <p>Could not find Employee Manager with id @EmployeeManagerId.</p>
}
else
{
  <EmployeeManagerForm Busy="Busy" 
         EmployeeManager="EmployeeManager" 
         DbEmployeeManager="DbEmployeeManager" 
         IsAdd="false" 
         CancelRequest="Cancel" 
         ValidationResult="@(async (success) => await ValidationResultAsync(success))" />
}

@if (ConcurrencyError)
{
  <br />
  <div class="alert alert-danger">
    <p>
      The Employee Manager details have changed since it was last loaded. The updated fields are highlighted in the form.
      Please choose an option:
    </p>
    <p><b>Cancel</b> to lose your changes and keep the database version.</p>
    <p><b>Submit</b> to force an update with your version.</p>
  </div>
}

@if (Error)
{
  <br />
  <div class="alert alert-danger">Failed to update the Employee Manager (@ErrorMessage).</div>
}

@code {
  [Parameter]
  public Guid EmployeeManagerId { get; set; }

  private ApplicationDbContext? Context { get; set; }

  private EmployeeManager EmployeeManager { get; set; } = new EmployeeManager();

  private EmployeeManager DbEmployeeManager { get; set; } = new EmployeeManager();

  private bool Busy;

  private bool Error;

  private bool ConcurrencyError;

  private string ErrorMessage = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    Busy = true;

    try
    {
      Context = DbFactory.CreateDbContext();

      if (Context is not null && Context.EmployeeManagers is not null)
      {
        var employeeManager = await Context.EmployeeManagers.SingleOrDefaultAsync(x => x.Id == EmployeeManagerId);

        if (employeeManager is not null)
        {
          EmployeeManager = employeeManager;
        }
      }
    }
    finally
    {
      Busy = false;
    }
  }

  private async Task ValidationResultAsync(bool success)
  {
    if (Busy)
    {
      return;
    }

    if (!success)
    {
      Error = false;
      ConcurrencyError = false;
      return;
    }

    Busy = true;
    try
    {
      if (Context is not null)
      {
        await Context.SaveChangesAsync();
      }

      EditSuccessState.Success = true;
      Navigation.NavigateTo($"/admin/employee-manager/view/{EmployeeManager.Id}");
    }
    catch (DbUpdateConcurrencyException dbex)
    {
      EditSuccessState.Success = false;

      ConcurrencyError = true;

      var dbValues = dbex.Entries[0].GetDatabaseValues();

      if (dbValues is null)
      {
        Navigation.NavigateTo($"/admin/employee-manager/view/{EmployeeManager.Id}");
        return;
      }

      DbEmployeeManager = (EmployeeManager)dbValues.ToObject();

      dbex.Entries[0].OriginalValues.SetValues(dbValues);
      Error = false;
      Busy = false;
    }
    catch (Exception ex)
    {
      EditSuccessState.Success = false;
      Error = true;
      ErrorMessage = ex.Message;
      Busy = false;
    }
  }

  private void Cancel()
  {
    Busy = true;
    Navigation.NavigateTo($"/admin/employee-manager");
  }

  public void Dispose() => Context?.Dispose();
}
