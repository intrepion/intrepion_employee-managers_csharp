<h1>@Mode EmployeeManager</h1>

<hr />
@if (EmployeeManager is not null)
{
    <EditForm Model="EmployeeManager" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>Employee</h2>
        <p>
            <label>
                Employee:
                <InputSelect @bind-Value="EmployeeManager.Employee" @oninput="HandleEmployeeChange">
                    <option value="">-- Select Employee --</option>
                    @foreach (var employee in EmployeeList)
                    {
                        <option value="@employee.Id">@employee.FirstName</option>
                    }
                </InputSelect>
            </label>
        </p>
        <h2>Manager</h2>
        <p>
            <label>
                Manager:
                <InputSelect @bind-Value="EmployeeManager.Manager" @oninput="HandleManagerChange">
                    <option value="">-- Select Manager --</option>
                    @foreach (var manager in ManagerList)
                    {
                        <option value="@manager.Id">@manager.FirstName@manager.LastName</option>
                    }
                </InputSelect>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public EmployeeManager? EmployeeManager { get; set; }

    [Parameter]
    public EmployeeManager? DbEmployeeManager { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    [Parameter]
    public List<Employee> EmployeeList { get; set; } = new List<Employee>();
    private Guid SelectedEmployeeId;
    [Parameter]
    public List<Employee> ManagerList { get; set; } = new List<Employee>();
    private Guid SelectedManagerId;
    @* DeclareListCodePlaceholder *@

    protected override void OnInitialized()
    {
        if (EmployeeManager?.Employee != null && !IsAdd)
        {
            SelectedEmployeeId = EmployeeManager.Employee.Id;
        }
        if (EmployeeManager?.Manager != null && !IsAdd)
        {
            SelectedManagerId = EmployeeManager.Manager.Id;
        }
        @* OnInitialCodePlaceholder *@
        @* if (EmulatorCore?.Emulator != null && !IsAdd)
        {
            SelectedEmulatorId = EmulatorCore.Emulator.Id;
        } *@
    }

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleEmployeeChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeEmployeePlaceholder
    }

    private void HandleManagerChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeManagerPlaceholder
    }

    // HandleChangeCodePlaceholder
}
