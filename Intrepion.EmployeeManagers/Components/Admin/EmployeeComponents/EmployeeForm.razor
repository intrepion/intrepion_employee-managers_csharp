<h1>@Mode Employee</h1>

<hr />
@if (Employee is not null)
{
    <EditForm Model="Employee" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>First Name</h2>
        <p>
            <label>
                First Name:
                <InputText @bind-Value="Employee.FirstName" @oninput="HandleFirstNameChange"/>
            </label>
        </p>
        <h2>Is Test?</h2>
        <p>
            <label>
                Is Test?:
                <InputCheckbox @bind-Value="Employee.IsTest" @oninput="HandleIsTestChange"/>
            </label>
        </p>
        <h2>Is Verified?</h2>
        <p>
            <label>
                Is Verified?:
                <InputCheckbox @bind-Value="Employee.IsVerified" @oninput="HandleIsVerifiedChange"/>
            </label>
        </p>
        <h2>Last Name</h2>
        <p>
            <label>
                Last Name:
                <InputText @bind-Value="Employee.LastName" @oninput="HandleLastNameChange"/>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    [Parameter]
    public EventCallback CancelRequest { get; set; }

    [Parameter]
    public bool IsAdd { get; set; }

    [Parameter]
    public Employee? Employee { get; set; }

    [Parameter]
    public Employee? DbEmployee { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    private string Mode => IsAdd ? "Add" : "Edit";

    @* DeclareListCodePlaceholder *@

    protected override void OnInitialized()
    {
        @* OnInitialCodePlaceholder *@
        @* if (EmulatorCore?.Emulator != null && !IsAdd)
        {
            SelectedEmulatorId = EmulatorCore.Emulator.Id;
        } *@
    }

    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleFirstNameChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeFirstNamePlaceholder
    }

    private void HandleIsTestChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeIsTestPlaceholder
    }

    private void HandleIsVerifiedChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeIsVerifiedPlaceholder
    }

    private void HandleLastNameChange(ChangeEventArgs changeEventArgs)
    {
        // SpecializedCodeLastNamePlaceholder
    }

    // HandleChangeCodePlaceholder
}
