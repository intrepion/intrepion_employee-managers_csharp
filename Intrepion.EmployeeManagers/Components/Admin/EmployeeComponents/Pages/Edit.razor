@page "/admin/employee/add"
@page "/admin/employee/edit/{EmployeeId:guid?}"
@rendermode InteractiveServer
@implements IDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Employee @(IsAdd ? "Add" : "Edit")</PageTitle>

@if (Employee is null && !Busy && !IsAdd)
{
  <p>Could not find Employee with id @EmployeeId.</p>
}
else
{
    @* EmulatorList="EmulatorList" *@
  <EmployeeForm
    Busy="Busy" 
    CancelRequest="Cancel"
    DbEmployee="DbEmployee" 
    Employee="Employee" 
    IsAdd="IsAdd"
    ValidationResult="@(async (success) => await ValidationResultAsync(success))"
  />
}

@if (Error)
{
  <br />
  <div class="alert alert-danger">Failed to @(IsAdd ? "add" : "update") the Employee (@ErrorMessage).</div>
}

@code {
  [Parameter]
  public Guid? EmployeeId { get; set; }

  private bool IsAdd => EmployeeId == null;

  private ApplicationDbContext? Context { get; set; }

  private Employee? Employee { get; set; }

  private Employee DbEmployee { get; set; } = new Employee();

  @* ListDeclarationCodePlaceholder *@
  @* private List<Emulator> EmulatorList { get; set; } = new List<Emulator>();*@

  private bool Busy;

  private bool Error;

  private string ErrorMessage = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    Busy = true;

    try
    {
      Context = DbFactory.CreateDbContext();

      @* LoadListCodePlaceholder *@
      @* if (Context.Emulators != null)
      {
        EmulatorList = await Context.Emulators.OrderBy(e => e.Name).ToListAsync();
      } *@

      if (IsAdd)
      {
        Employee = new();
      }
      else if (Context is not null && Context.Employees is not null)
      {
        var employee = await Context.Employees
            @* IncludeListCodePlaceholder *@
            @* .Include(e => e.Emulator) *@
            .SingleOrDefaultAsync(x => x.Id == EmployeeId);

        if (employee is not null)
        {
          Employee = employee;
        }
      }
    }
    finally
    {
      Busy = false;
    }
  }

  private async Task ValidationResultAsync(bool success)
  {
    if (Busy)
    {
      return;
    }

    if (!success)
    {
      Error = false;
      return;
    }

    Busy = true;

    try
    {
      if (Context is not null && Employee is not null)
      {
        @* SetExistingCodePlaceholder *@
        @* if (Employee.Emulator != null && Employee.Emulator.Id != Guid.Empty)
        {
          var existingEmulator = await Context.Emulators.FindAsync(Employee.Emulator.Id);
          if (existingEmulator != null)
          {
            Employee.Emulator = existingEmulator;
          }
        } *@
        
        if (IsAdd && Context.Employees != null)
        {
          Context.Employees.Add(Employee);
        }
        
        await Context.SaveChangesAsync();
      }

      Navigation.NavigateTo($"/admin/employee/view/{Employee?.Id}");
    }
    catch (DbUpdateConcurrencyException dbex)
    {
      var dbValues = dbex.Entries[0].GetDatabaseValues();

      if (dbValues is null)
      {
        Navigation.NavigateTo($"/admin/employee/view/{Employee?.Id}");
        return;
      }

      DbEmployee = (Employee)dbValues.ToObject();

      dbex.Entries[0].OriginalValues.SetValues(dbValues);
      Error = false;
      Busy = false;
    }
    catch (Exception ex)
    {
      Error = true;
      ErrorMessage = ex.Message;
      Busy = false;
    }
  }

  private void Cancel()
  {
    Busy = true;
    Navigation.NavigateTo($"/admin/employee");
  }

  public void Dispose() => Context?.Dispose();
}
